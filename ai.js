const OpenAI = require("openai");
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Prompt Base (com refinamento Alice V3)
function construirPrompt(historico, sessao) {
  const intro = `
Voc√™ √© Alice, a assistente inteligente da BRYNIX. Sua miss√£o √© recepcionar com leveza e simpatia os visitantes do site, conduzindo uma conversa natural e envolvente ‚Äî como se estivesse batendo papo com algu√©m real.

üß† A cada nova intera√ß√£o, considere tudo o que j√° foi falado anteriormente. N√ÉO repita perguntas j√° respondidas. Se o usu√°rio j√° disse algo, use isso para **aprofundar a conversa**, n√£o para reinici√°-la.

üéØ Seu objetivo √© descobrir, com naturalidade e sem parecer um formul√°rio:
- Nome da pessoa
- Nome da empresa
- Forma de contato (WhatsApp ou e-mail)
- O desafio ou objetivo principal da pessoa
- Porte da empresa (micro, pequena, m√©dia, grande)
- Se est√° apenas conhecendo ou realmente interessado agora

üö´ Nunca pergunte tudo de uma vez. Conduza como uma conversa leve e progressiva.

‚ö†Ô∏è Nunca reinicie a conversa ou repita perguntas j√° feitas, como: ‚ÄúQual √© o seu nome?‚Äù se o usu√°rio j√° falou isso. N√£o trate o usu√°rio como se ele estivesse come√ßando do zero.

üí° Sempre traga um toque de empatia, leveza e intelig√™ncia. Fale como uma pessoa real:
- Simp√°tica, mas sem exagero
- Profissional, sem ser fria
- Curiosa, sem ser invasiva
- Espont√¢nea, sem parecer rob√¥

Exemplos de boa conversa:

Usu√°rio: Meu nome √© Ricardo.
Alice: Oi, Ricardo! üòä Que bom ter voc√™ por aqui. Me conta: com o que voc√™ trabalha?

Usu√°rio: Sou dono de uma bicicletaria.
Alice: Que legal! üö≤ E qual √© o nome da sua bicicletaria?

Usu√°rio: Ela se chama Sobre 2 Rodas.
Alice: Nome excelente! J√° d√° vontade de pedalar s√≥ de ouvir üòÑ E me diz uma coisa: qual tem sido o maior desafio por a√≠?

‚Üí Continue nesse estilo. Use os dados conforme forem surgindo. N√£o repita perguntas. Seja natural, fluida e presente.
`;

  const historicoTexto = historico
    .map(msg => `${msg.de === "usuario" ? "Usu√°rio" : "Alice"}: ${msg.texto}`)
    .join("\n");

  return `${intro}\n\n${historicoTexto}\n\nAlice:`;
}
// RegEx para extra√ß√£o de dados
function extrairDados(resposta) {
  const coleta = {};

  const regexes = {
    nome: /(?:meu nome (?:√©|sou|chamo-me)|sou o|sou a)\s+([A-Z√Ä-√ö][a-z√†-√∫]+(?:\s[A-Z√Ä-√ö][a-z√†-√∫]+)*)/i,
    empresa: /(?:minha empresa|empresa (?:chama-se|se chama|√©|nome √©))[:\-]?\s*([A-Z0-9&.\- ]{3,})/i,
    contato: /(\(?\d{2}\)?\s?\d{4,5}[-\s]?\d{4})|([a-z0-9_.+-]+@[a-z0-9-]+\.[a-z.]+)/i,
    porte: /\b(micro|pequena|m√©dia|grande)\b/i,
    desafio: /(desafio|problema|dificuldade|quest√£o)[^.!?]{5,}/i,
    classificacao: /\b(quente|morno|frio)\b/i
  };

  for (const campo in regexes) {
    const match = resposta.match(regexes[campo]);
    if (match) {
      coleta[campo] = match[1] || match[2];
    }
  }

  return coleta;
}

// Fun√ß√£o principal da IA
async function gerarResposta(mensagem, sessao = {}) {
  try {
    // Prote√ß√µes de hist√≥rico e coleta
    sessao.historico = sessao.historico || [];
    sessao.coletado = sessao.coletado || {};

    // Atualiza hist√≥rico
    sessao.historico.push({ de: "usuario", texto: mensagem });

    const prompt = construirPrompt(sessao.historico, sessao);

    // Nova API chat.completions
    const completion = await openai.chat.completions.create({
      model: "gpt-4o", // pode trocar para "gpt-3.5-turbo"
      messages: [
        { role: "system", content: prompt },
        { role: "user", content: mensagem }
      ],
      temperature: 0.7,
      max_tokens: 500,
    });

    const resposta = completion.choices[0].message.content.trim();

    // Atualiza hist√≥rico com resposta da IA
    sessao.historico.push({ de: "bot", texto: resposta });

    // Tenta extrair dados
    const dadosExtraidos = extrairDados(`${mensagem}\n${resposta}`);

    // Atualiza o que for novo
    for (const chave in dadosExtraidos) {
      if (!sessao.coletado[chave]) {
        sessao.coletado[chave] = dadosExtraidos[chave];
      }
    }

    console.log("üí° Dados coletados at√© agora:", sessao.coletado);

    return { resposta, coleta: sessao.coletado };
  } catch (erro) {
    console.error("‚ùå Erro em gerarResposta:", erro.message);
    return {
      resposta: "Desculpe, houve um erro ao gerar a resposta. Pode tentar novamente?",
      coleta: sessao.coletado || {},
    };
  }
}

module.exports = gerarResposta;
